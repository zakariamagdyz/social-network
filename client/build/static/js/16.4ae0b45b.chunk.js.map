{"version":3,"sources":["Components/auth/LogIn/InputField.jsx","Components/common/GlobalStyledComponents.jsx","Components/auth/Register/Register.jsx"],"names":["InputField","label","props","useField","field","meta","TextField","error","touched","helperText","selectSize","size","FormCotnainer","styled","div","margin","StyledForm","Form","FormInput","FormButton","Button","Register","dispatch","useDispatch","isAuthenticated","useSelector","state","auth","validationSchema","Yup","shape","name","required","min","max","email","password","passwordConfirm","test","val","this","parent","onSubmit","values","actions","a","register","isSubmitting","to","className","initialValues","type","variant","disabled"],"mappings":"kTAkBeA,MAdf,YAA0C,IAApBC,EAAmB,EAAnBA,MAAUC,EAAS,2BACjBC,YAASD,GADQ,mBAChCE,EADgC,KACzBC,EADyB,KAGvC,OACE,kBAACC,EAAA,EAAD,iBACMJ,EACAE,EAFN,CAGEH,MAAOA,EACPM,MAAOF,EAAKE,OAASF,EAAKG,QAC1BC,WAAYJ,EAAKE,OAASF,EAAKG,SAAWH,EAAKE,U,y/BCRrD,IAAMG,EAAa,SAACC,GAClB,OAAQA,GACN,IAAK,KACH,MAAO,WACT,IAAK,IACH,MAAO,WACT,IAAK,IACH,MAAO,SACT,IAAK,IACH,MAAO,WACT,IAAK,KACH,MAAO,SAET,QACE,MAAO,WAIAC,EAAgBC,IAAOC,IAAV,KAId,SAACZ,GACT,OAAOA,EAAMa,QAAUL,EAAWR,EAAMa,WAa/BC,EAAaH,YAAOI,IAAPJ,CAAH,KACX,SAACX,GACT,OAAOQ,EAAWR,EAAMa,WAWfG,EAAYL,YAAOb,EAAPa,CAAH,KAYR,SAACX,GACT,OAAOQ,EAAWR,EAAMa,WAKjBI,EAAaN,YAAOO,IAAPP,CAAH,KAGT,SAACX,GACT,OAAOQ,EAAWR,EAAMa,Y,+ICwBfM,UAvFE,WACf,IAAMC,EAAWC,cACTC,EAAoBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAjDH,gBAQFI,EAAmBC,MAAaC,MAAM,CAC1CC,KAAMF,MAAaG,WAAWC,IAAI,GAAGC,IAAI,IACzCC,MAAON,MAAaG,WAAWC,IAAI,GAAGC,IAAI,IAC1CE,SAAUP,MAAaG,WAAWC,IAAI,GAAGC,IAAI,IAC7CG,gBAAiBR,MACdG,WACAC,IAAI,GACJC,IAAI,IACJI,KAAK,kBAAmB,yBAAyB,SAAUC,GAC1D,OAAOA,IAAQC,KAAKC,OAAOL,cAI3BM,EAAQ,uCAAG,WAAOC,EAAQC,GAAf,qBAAAC,EAAA,6DACPd,EAA2CY,EAA3CZ,KAAMI,EAAqCQ,EAArCR,MAAOC,EAA8BO,EAA9BP,SAAUC,EAAoBM,EAApBN,gBADhB,kBAGPf,EACJwB,YAAS,CAAEf,OAAMI,QAAOC,WAAUC,mBAAmBO,IAJ1C,uBAObA,EAAQG,cAAa,GAPR,uEAAH,wDAWd,OAAIvB,EACK,kBAAC,IAAD,CAAUwB,GAAG,eAIpB,kBAAC,IAAD,CAAejC,OAAO,KACpB,uCACA,2BACE,uBAAGkC,UAAU,gBADf,wBAGA,kBAAC,IAAD,CACEC,cAzCgB,CACpBnB,KAAM,GACNI,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAsCbT,iBAAkBA,EAClBc,SAAUA,IAET,YAAuB,IAApBK,EAAmB,EAAnBA,aACF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWhB,KAAK,OAAO9B,MAAM,SAE7B,kBAAC,IAAD,CAAW8B,KAAK,QAAQ9B,MAAM,kBAC9B,+GAIA,kBAAC,IAAD,CAAW8B,KAAK,WAAW9B,MAAM,WAAWkD,KAAK,aAEjD,kBAAC,IAAD,CACEpB,KAAK,kBACL9B,MAAM,mBACNkD,KAAK,aAEP,kBAAC,IAAD,CACEA,KAAK,SACLxC,KAAK,QACLyC,QAAQ,YACRC,SAAUN,EACVhC,OAAO,KAENgC,EAAe,UAAY,cAOtC,uDAC2B,kBAAC,IAAD,CAAMC,GAAG,UAAT","file":"static/js/16.4ae0b45b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useField } from \"formik\";\r\n\r\nfunction InputField({ label, ...props }) {\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      label={label}\r\n      error={meta.error && meta.touched}\r\n      helperText={meta.error && meta.touched && meta.error}\r\n    />\r\n  );\r\n}\r\n\r\nexport default InputField;\r\n","import styled, { css } from \"styled-components\";\r\nimport { Form } from \"formik\";\r\nimport InputField from \"../auth/LogIn/InputField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst selectSize = (size) => {\r\n  switch (size) {\r\n    case \"xs\":\r\n      return \"1.5rem 0\";\r\n    case \"s\":\r\n      return \"2.5rem 0\";\r\n    case \"m\":\r\n      return \"3rem 0\";\r\n    case \"l\":\r\n      return \"3.5rem 0\";\r\n    case \"xl\":\r\n      return \"5rem 0\";\r\n\r\n    default:\r\n      return \"1rem 0\";\r\n  }\r\n};\r\n\r\nexport const FormCotnainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 2rem;\r\n  margin: ${(props) => {\r\n    return props.margin && selectSize(props.margin);\r\n  }};\r\n\r\n  & > h1 {\r\n    color: var(--primary-color);\r\n    font-size: 5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  p {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nexport const StyledForm = styled(Form)`\r\n  margin: ${(props) => {\r\n    return selectSize(props.margin);\r\n  }};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  > small {\r\n    font-size: 1.1rem;\r\n    margin: 1rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled(InputField)`\r\n  input {\r\n    padding: 1rem;\r\n    font-size: 2rem;\r\n  }\r\n  label {\r\n    font-size: 1.7rem;\r\n  }\r\n  p {\r\n    font-size: 1.4rem;\r\n  }\r\n  && {\r\n    margin: ${(props) => {\r\n      return selectSize(props.margin);\r\n    }};\r\n  }\r\n`;\r\n\r\nexport const FormButton = styled(Button)`\r\n  align-self: flex-start;\r\n  && {\r\n    margin: ${(props) => {\r\n      return selectSize(props.margin);\r\n    }};\r\n  }\r\n  && {\r\n    background: #343a40;\r\n    color: #fff;\r\n    font-size: 1.8rem;\r\n  }\r\n  &&:hover {\r\n    background: #17a2b8;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { register } from \"../../../redux/actions/auth\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  StyledForm,\r\n  FormInput,\r\n  FormCotnainer,\r\n  FormButton,\r\n} from \"../../common/GlobalStyledComponents\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuthenticated } = useSelector((state) => state.auth);\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n  };\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string().required().min(3).max(55),\r\n    email: Yup.string().required().min(3).max(55),\r\n    password: Yup.string().required().min(8).max(55),\r\n    passwordConfirm: Yup.string()\r\n      .required()\r\n      .min(8)\r\n      .max(55)\r\n      .test(\"passwordConfirm\", \"Passwords Don't match\", function (val) {\r\n        return val === this.parent.password;\r\n      }),\r\n  });\r\n\r\n  const onSubmit = async (values, actions) => {\r\n    const { name, email, password, passwordConfirm } = values;\r\n    try {\r\n      await dispatch(\r\n        register({ name, email, password, passwordConfirm }, actions)\r\n      );\r\n    } finally {\r\n      actions.isSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/dashboard\"></Redirect>;\r\n  }\r\n\r\n  return (\r\n    <FormCotnainer margin=\"l\">\r\n      <h1>Sign Up</h1>\r\n      <p>\r\n        <i className=\"fas fa-user\"></i> Create Your Account\r\n      </p>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({ isSubmitting }) => {\r\n          return (\r\n            <StyledForm>\r\n              <FormInput name=\"name\" label=\"Name\" />\r\n\r\n              <FormInput name=\"email\" label=\"Email Address\" />\r\n              <small>\r\n                This site uses Gravatar so if you want a profile image, use a\r\n                Gravatar email\r\n              </small>\r\n              <FormInput name=\"password\" label=\"Password\" type=\"password\" />\r\n\r\n              <FormInput\r\n                name=\"passwordConfirm\"\r\n                label=\"Password Confirm\"\r\n                type=\"password\"\r\n              />\r\n              <FormButton\r\n                type=\"submit\"\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                disabled={isSubmitting}\r\n                margin=\"m\"\r\n              >\r\n                {isSubmitting ? \"loading\" : \"Submit\"}\r\n              </FormButton>\r\n            </StyledForm>\r\n          );\r\n        }}\r\n      </Formik>\r\n\r\n      <p>\r\n        Already have an account? <Link to=\"/login\">Sign In</Link>\r\n      </p>\r\n    </FormCotnainer>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}